# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import sys
from pathlib import Path
FILE = Path(__file__).resolve()
ROOT = FILE.parents[0]
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))
import detection_pb2 as detection__pb2


class ioper_serverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ObjectDetection = channel.unary_unary(
                '/detect.ioper_server/ObjectDetection',
                request_serializer=detection__pb2.ObjectDetectionRequest.SerializeToString,
                response_deserializer=detection__pb2.ObjectDetectionResponse.FromString,
                )
        self.ReadMeter = channel.unary_unary(
                '/detect.ioper_server/ReadMeter',
                request_serializer=detection__pb2.ReadMeterRequest.SerializeToString,
                response_deserializer=detection__pb2.ReadMeterResponse.FromString,
                )


class ioper_serverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ObjectDetection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadMeter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ioper_serverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ObjectDetection': grpc.unary_unary_rpc_method_handler(
                    servicer.ObjectDetection,
                    request_deserializer=detection__pb2.ObjectDetectionRequest.FromString,
                    response_serializer=detection__pb2.ObjectDetectionResponse.SerializeToString,
            ),
            'ReadMeter': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadMeter,
                    request_deserializer=detection__pb2.ReadMeterRequest.FromString,
                    response_serializer=detection__pb2.ReadMeterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'detect.ioper_server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ioper_server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ObjectDetection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/detect.ioper_server/ObjectDetection',
            detection__pb2.ObjectDetectionRequest.SerializeToString,
            detection__pb2.ObjectDetectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadMeter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/detect.ioper_server/ReadMeter',
            detection__pb2.ReadMeterRequest.SerializeToString,
            detection__pb2.ReadMeterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
